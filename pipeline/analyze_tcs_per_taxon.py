#!/usr/bin/python3
import sys, getopt
import collections

USAGE = "\nThe script calculates domain and domain combination prevalences at chosen taxonomy levels using the result of the 'analyze_tcs_per_genome' script. \n" + \
	"'analyze_tcs_per_genome' script produces domain (as well as domain combination, domain superfamily, domain superfamily combination) count statisitcs per genome.\n\n" + \
	"python " + sys.argv[0] + '''
	-h || --help               - help
	-i || --ifile              - input file 1 (protein and domain statistics information file generated by the analyze_tcs_pergenome.py script, one of four:
	                                * domain prevalence
							        * domain combination prevalence
							        * domain supefamily prevalence
							        * domain supefamily combination prevalence)
	-s || --sfile              - input file 2 (GTDB taxonomy metadata file)
	-f || --ffile              - output file 1 (protein and domains statistics per selected taxon)
	-t || --taxlevel           - taxonomy level to calculate the average at (one of "species", "genus", "order", "family", "class", "phylum", "kingdom")
'''
# Variables controlled by the script parameters
INPUT_FILE1 = None
INPUT_FILE2 = None
INPUT_FILE3 = "/home/vadim/bin/ar53_bac120_taxonmy_r214.tsv"
TAXONOMY_LEVEL = "species"

OUTPUT_FILE1 = "domain_statistics_per_taxon.tsv"

GENOME_TO_DOMAIN = collections.defaultdict(list)
GENOME_TO_TAXONOMY = {}
# {"full taxonomy up to the selected level": ["Genome1", "Genome2", "Genome3", ...], ...}
TAXONOMY_TO_GENOMES = collections.defaultdict(list)
# {"full taxonomy up to the selected level": {"domain1 (domain combination 1)": 21, "domain2(or domain comb 2)": 852, ...}, ...}
TAXONOMY_TO_STATISTICS = collections.defaultdict(dict)

def initialize(argv):
	global INPUT_FILE1, INPUT_FILE2, OUTPUT_FILE1, TAXONOMY_LEVEL
	try:
		opts, args = getopt.getopt(argv[1:],"hi:s:f:t:",["help", "ifile=", "sfile=", "ffile=", "taxlevel="])
		if len(opts) == 0:
			raise getopt.GetoptError("Options are required\n")
	except getopt.GetoptError as e:
		print("===========ERROR==========\n " + str(e) + USAGE)
		sys.exit(2)
	try:
		for opt, arg in opts:
			if opt in ("-h", "--help"):
				print(USAGE)
				sys.exit()
			elif opt in ("-i", "--ifile"):
				INPUT_FILE1 = str(arg).strip()
			elif opt in ("-s", "--sfile"):
				INPUT_FILE2 = str(arg).strip()
			elif opt in ("-f", "--ffile"):
				OUTPUT_FILE1 = str(arg).strip()
			elif opt in ("-t", "--taxlevel"):
				TAXONOMY_LEVEL = tax_level_selector(str(arg).strip())
				print("Taxonomy level is '" + arg + "':", TAXONOMY_LEVEL)
				if TAXONOMY_LEVEL == None:
					raise IOError("Incorrect argument of -t (--taxlevel) option")
	except Exception as e:
		print("===========ERROR==========\n" + str(e) + USAGE)
		sys.exit(2)

def process_input():
	global GENOME_TO_DOMAIN
	with open(INPUT_FILE1, "r") as iFile1:
		for line in iFile1:
			# domain_c can be a signle domain (GAF_3) or a domain combination (ex, GAF_3,PAS_3,PAS_4,hole)
			genomeID, domain_c, count = line.strip().split("\t")
			# {"GenomeID1": (TIM, 5), ... }
			# Can be domain combination to counts: ("TIM,PIR", 62), ...
			GENOME_TO_DOMAIN[genomeID].append((domain_c, int(count)))
	with open(INPUT_FILE3, "r") as iFile3:
		for line in iFile3:
			record = line.strip().split("\t")
			genomeID = "_".join(record[0].split("_")[1:])
			taxonomy = ";".join(record[1].split(";")[:TAXONOMY_LEVEL])
			GENOME_TO_TAXONOMY[genomeID] = taxonomy
			TAXONOMY_TO_GENOMES[taxonomy].append(genomeID)

# reports inofrmation per taxon
# G1 Domcomb2 12
# d__Archaea;p__Halobacteriota;c__Methanosarcinia;o__Methanosarcinales;f__Methanosarcinaceae;g__Methanosarcina;s__Methanosarcina mazei
def process_domains_per_taxon():
	for genome, domain_counts in GENOME_TO_DOMAIN.items():
		for element in domain_counts:
			taxonomy = GENOME_TO_TAXONOMY[genome]
			domain_c = element[0]
			if  domain_c in TAXONOMY_TO_STATISTICS[taxonomy]:
				TAXONOMY_TO_STATISTICS[taxonomy][domain_c] += element[1]
			else:
				TAXONOMY_TO_STATISTICS[taxonomy][domain_c] = element[1]

def write_to_file():
	with open(OUTPUT_FILE1, "w") as oFile:
		for taxon, domain_counts in TAXONOMY_TO_STATISTICS.items():
			for domain_c, count in domain_counts.items():
				oFile.write("\t".join([taxon, domain_c, str(count)]) + "\n")

def tax_level_selector(level):
	if level == "species":
		return 7
	elif level == "genus":
		return 6
	elif level == "family":
		return 5
	elif level == "order":
		return 4
	elif level == "class":
		return 3
	elif level == "phylum":
		return 2
	elif level == "kingdom":
		return 1
	return None
						
def main(argv):
	initialize(argv)
	process_input()
	process_domains_per_taxon()
	write_to_file()

main(sys.argv)
